using Luban;

{{ 
    key_type = __table.key_ttype
    value_type =  __table.value_ttype
    
    func index_type_name
        ret (declaring_type_name $0.type)
    end
    
    func table_union_map_type_name
        ret 'System.Collections.Generic.Dictionary<(' + (array.each __table.index_list @index_type_name | array.join ', ') + '), ' + (declaring_type_name value_type)  + '>'
    end

    func get_methord_param
        nameList = [];
        for $i in (0..$0)
            nameList[$i] = (declaring_type_name __table.index_list[$i].type) + ' ' + (__table.index_list[$i].index_field.name)
        end
        ret array.join nameList ', '
    end
    func get_methord_input_param
        nameList = [];
        for $i in (0..$0)
            nameList[$i] = __table.index_list[$i].index_field.name
        end
        ret array.join nameList ', '
    end

    func get_methord_return 
        maxLen = __table.index_list.size
        if $0 == maxLen - 1
            ret (declaring_type_name value_type);
        end
        return_str = ""
        return_len = maxLen - $0 - 2
        for $i in (0..return_len)
            lIdx = maxLen - $i - 1
            return_str = 'System.Collections.Generic.SortedDictionary<' + (declaring_type_name __table.index_list[lIdx].type) + ', ' + return_str
        end
        return_str = return_str + (declaring_type_name value_type)
        for $i in (0..return_len)
            return_str = return_str + '>'
        end

        ret return_str;
    end

    func table_list_map_type_name
        preList = __table.index_list |array.each do; ret 'System.Collections.Generic.SortedDictionary<' + (declaring_type_name $0.type); end;
        afterList = __table.index_list |array.each do; ret '>'; end;
        ret (array.join preList ', ') + ', ' + (declaring_type_name value_type) + (array.join afterList '')
    end
    
    func table_key_list
        varName = $0
        indexList = __table.index_list |array.each do; ret varName + '.' + (format_property_name __code_style $0.index_field.name); end;
        ret array.join indexList ', '
    end
    
    func table_param_def_list
        paramList = __table.index_list |array.each do; ret (declaring_type_name $0.type) + ' ' + $0.index_field.name; end
        ret array.join paramList ', '
    end
    
    func table_param_name_list
        paramList = __table.index_list |array.each do; ret $0.index_field.name; end
        ret array.join paramList ', '
    end
}}
{{namespace_with_grace_begin __namespace_with_top_module}}
{{~if __table.comment != '' ~}}
/// <summary>
/// {{escape_comment __table.comment}}
/// </summary>
{{~end~}}
public partial class {{__name}}
{
    public static {{__name}} Instance => ConfigSystem.Instance.Tables.{{__table.name}};
    {{~if __table.is_map_table ~}}
    private readonly System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> _dataMap;
    private readonly System.Collections.Generic.List<{{declaring_type_name value_type}}> _dataList;
    
    public {{__name}}(ByteBuf _buf)
    {
        _dataMap = new System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}>();
        _dataList = new System.Collections.Generic.List<{{declaring_type_name value_type}}>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            {{declaring_type_name value_type}} _v;
            {{deserialize '_buf' '_v' value_type}}
            _dataList.Add(_v);
            _dataMap.Add(_v.{{format_property_name __code_style __table.index_field.name}}, _v);
        }
    }

    public System.Collections.Generic.Dictionary<{{declaring_type_name key_type}}, {{declaring_type_name value_type}}> DataMap => _dataMap;
    public System.Collections.Generic.List<{{declaring_type_name value_type}}> DataList => _dataList;

{{~if value_type.is_dynamic~}}
    public T GetOrDefaultAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => _dataMap.TryGetValue(key, out var v) ? (T)v : null;
    public T GetAs<T>({{declaring_type_name key_type}} key) where T : {{declaring_type_name value_type}} => (T)_dataMap[key];
{{~end~}}
    public {{declaring_type_name value_type}} GetOrDefault({{declaring_type_name key_type}} key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public {{declaring_type_name value_type}} Get({{declaring_type_name key_type}} key) => _dataMap.TryGetValue(key, out var v) ? v : null;
    public {{declaring_type_name value_type}} this[{{declaring_type_name key_type}} key] => _dataMap.TryGetValue(key, out var v) ? v : null;

    public void ResolveRef({{__manager_name}} tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }

    

        {{~else if __table.is_list_table ~}}
    private readonly System.Collections.Generic.List<{{declaring_type_name value_type}}> _dataList;

    {{~if __table.is_union_index~}}
    private {{table_union_map_type_name}} _dataMapUnion;
    private readonly {{table_list_map_type_name}} _dataMapList;
    public {{table_list_map_type_name}} DataMapList => _dataMapList;
    {{~else if !__table.index_list.empty?~}}
    {{~for idx in __table.index_list~}}
    private System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}> _dataMap_{{idx.index_field.name}};
    {{~end~}}
    {{~end~}}

    public {{__name}}(ByteBuf _buf)
    {
        _dataList = new System.Collections.Generic.List<{{declaring_type_name value_type}}>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            {{declaring_type_name value_type}} _v;
            {{deserialize '_buf' '_v' value_type}}
            _dataList.Add(_v);
        }
    {{~if __table.is_union_index~}}
        _dataMapUnion = new {{table_union_map_type_name}}();
        _dataMapList = new {{table_list_map_type_name}}();
        foreach(var _v in _dataList)
        {
            _dataMapUnion.Add(({{table_key_list "_v"}}), _v);

    {{~_dataMapList_index = 0~}}
    {{~_dataMapList_key_name = ""~}}
    {{~_dataMapList_val_name = ""~}}
    {{~for idx in __table.index_list~}}
        {{~if _dataMapList_index == 0~}}
            var lastMap_{{idx.index_field.name}} = _dataMapList;
        {{~else~}}
            var lastMap_{{idx.index_field.name}} = lastMap_{{_dataMapList_key_name}}[_v.{{_dataMapList_val_name}}];
        {{~end~}}
        {{~if _dataMapList_index < __table.index_list.size - 1~}}
            if (!lastMap_{{idx.index_field.name}}.ContainsKey(_v.{{(format_property_name __code_style idx.index_field.name)}}))
            {
                lastMap_{{idx.index_field.name}}.Add(_v.{{(format_property_name __code_style idx.index_field.name)}}, new ());
            }
        {{~else~}}
            lastMap_{{idx.index_field.name}}.Add(_v.{{(format_property_name __code_style idx.index_field.name)}}, _v);
        {{~end~}}
        {{~_dataMapList_index = _dataMapList_index + 1~}}
        {{~_dataMapList_key_name = idx.index_field.name~}}
        {{~_dataMapList_val_name = (format_property_name __code_style idx.index_field.name)~}}
    {{~end~}}
        }

    {{~else if !__table.index_list.empty?~}}
    {{~for idx in __table.index_list~}}
        _dataMap_{{idx.index_field.name}} = new System.Collections.Generic.Dictionary<{{declaring_type_name idx.type}}, {{declaring_type_name value_type}}>();
    {{~end~}}
    foreach(var _v in _dataList)
    {
    {{~for idx in __table.index_list~}}
        _dataMap_{{idx.index_field.name}}.Add(_v.{{format_property_name __code_style idx.index_field.name}}, _v);
    {{~end~}}
    }
    {{~end~}}
    }

    public System.Collections.Generic.List<{{declaring_type_name value_type}}> DataList => _dataList;

    {{~if __table.is_union_index~}}
    public {{declaring_type_name value_type}} Get({{table_param_def_list}}) => _dataMapUnion.TryGetValue(({{table_param_name_list}}), out {{declaring_type_name value_type}} __v) ? __v : null;
    
    {{~_dataMapList_index = 0~}}
    {{~for idx in __table.index_list~}}
    public {{get_methord_return _dataMapList_index}} Get{{~_dataMapList_index+1~}}Key({{get_methord_param _dataMapList_index}}){
        {{~if _dataMapList_index == 0~}}
        var map = _dataMapList;
        {{~else~}}
        var map = Get{{~_dataMapList_index~}}Key({{get_methord_input_param _dataMapList_index-1}});
		if (map == null)
			return null;
        {{~end~}}
        return map.TryGetValue({{idx.index_field.name}}, out var __v) ? __v : null;
    }
    {{~_dataMapList_index = _dataMapList_index + 1~}}
    {{~end~}}
    {{~else if !__table.index_list.empty? ~}}
        {{~for idx in __table.index_list~}}
    public {{declaring_type_name value_type}} GetBy{{format_property_name __code_style idx.index_field.name}}({{declaring_type_name idx.type}} key) => _dataMap_{{idx.index_field.name}}.TryGetValue(key, out {{declaring_type_name value_type}} __v) ? __v : null;
        {{~end~}}
    {{~end~}}
    
    public void ResolveRef({{__manager_name}} tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }
    {{~else~}}

     private readonly {{declaring_type_name value_type}} _data;

     public {{declaring_type_name value_type}} Data => _data;

    public {{__name}}(ByteBuf _buf)
    {
        int n = _buf.ReadSize();
        if (n != 1) throw new SerializationException("table mode=one, but size != 1");
        {{deserialize '_buf' '_data' value_type}}
    }


    {{~ for field in value_type.def_bean.hierarchy_export_fields ~}}
{{~if field.comment != '' ~}}
    /// <summary>
    /// {{escape_comment field.comment}}
    /// </summary>
{{~end~}}
     public {{declaring_type_name field.ctype}} {{format_property_name __code_style field.name}} => _data.{{format_property_name __code_style field.name}};
    {{~end~}}
    
    public void ResolveRef({{__manager_name}} tables)
    {
        _data.ResolveRef(tables);
    }
    {{~end~}}
}

{{namespace_with_grace_end __namespace_with_top_module}}