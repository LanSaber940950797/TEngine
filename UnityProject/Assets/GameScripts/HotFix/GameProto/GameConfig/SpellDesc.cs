
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace GameConfig
{
public sealed partial class SpellDesc : Luban.BeanBase
{
    public SpellDesc(ByteBuf _buf) 
    {
        Id = _buf.ReadInt();
        Name = _buf.ReadString();
        SkillType = (Battle.SkillType)_buf.ReadInt();
        SpellTargetType = (GameLogic.Battle.SpellTargetType)_buf.ReadInt();
        TargetSideType = (GameLogic.Battle.TargetSideType)_buf.ReadInt();
        Icon = _buf.ReadString();
        Priority = _buf.ReadInt();
        TreeName = _buf.ReadString();
        CoolDownTime = _buf.ReadInt();
        MaxHit = _buf.ReadInt();
        HitInterval = _buf.ReadInt();
        RangeType = _buf.ReadInt();
        MinDist = _buf.ReadFloat();
        MaxDist = _buf.ReadFloat();
    }

    public static SpellDesc DeserializeSpellDesc(ByteBuf _buf)
    {
        return new SpellDesc(_buf);
    }

    /// <summary>
    /// 技能ID
    /// </summary>
    public readonly int Id;
    /// <summary>
    /// 名字
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 技能类型SkillType<br/>1.主动技能<br/>2 被动技能
    /// </summary>
    public readonly Battle.SkillType SkillType;
    /// <summary>
    /// 施法目标类型
    /// </summary>
    public readonly GameLogic.Battle.SpellTargetType SpellTargetType;
    /// <summary>
    /// 目标阵营
    /// </summary>
    public readonly GameLogic.Battle.TargetSideType TargetSideType;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly string Icon;
    /// <summary>
    /// 优先级
    /// </summary>
    public readonly int Priority;
    /// <summary>
    /// 技能行为树
    /// </summary>
    public readonly string TreeName;
    /// <summary>
    /// 技能ms
    /// </summary>
    public readonly int CoolDownTime;
    /// <summary>
    /// 最大打击次数，不填默认1
    /// </summary>
    public readonly int MaxHit;
    /// <summary>
    /// 打击间隔，超过就重置打击
    /// </summary>
    public readonly int HitInterval;
    /// <summary>
    /// 射程类型<br/>0 无<br/>1 近战<br/>2 远程
    /// </summary>
    public readonly int RangeType;
    /// <summary>
    /// 射程min
    /// </summary>
    public readonly float MinDist;
    /// <summary>
    /// 射程Max
    /// </summary>
    public readonly float MaxDist;
   
    public const int __ID__ = 568770489;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
        
        
        
        
        
        
        
        
        
        
        
        
        
        
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "skillType:" + SkillType + ","
        + "spellTargetType:" + SpellTargetType + ","
        + "targetSideType:" + TargetSideType + ","
        + "icon:" + Icon + ","
        + "priority:" + Priority + ","
        + "treeName:" + TreeName + ","
        + "coolDownTime:" + CoolDownTime + ","
        + "maxHit:" + MaxHit + ","
        + "hitInterval:" + HitInterval + ","
        + "rangeType:" + RangeType + ","
        + "minDist:" + MinDist + ","
        + "maxDist:" + MaxDist + ","
        + "}";
    }
}

}
