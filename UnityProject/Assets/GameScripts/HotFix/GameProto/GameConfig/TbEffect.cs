
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace GameConfig
{
public partial class TbEffect
{
    public static TbEffect Instance => ConfigSystem.Instance.Tables.TbEffect;
    private readonly System.Collections.Generic.List<EffectDesc> _dataList;

    private System.Collections.Generic.Dictionary<(int, int), EffectDesc> _dataMapUnion;

    public TbEffect(ByteBuf _buf)
    {
        _dataList = new System.Collections.Generic.List<EffectDesc>();
        
        for(int n = _buf.ReadSize() ; n > 0 ; --n)
        {
            EffectDesc _v;
            _v = EffectDesc.DeserializeEffectDesc(_buf);
            _dataList.Add(_v);
        }
        _dataMapUnion = new System.Collections.Generic.Dictionary<(int, int), EffectDesc>();
        foreach(var _v in _dataList)
        {
            _dataMapUnion.Add((_v.Id, _v.Level), _v);
        }
    }

    public System.Collections.Generic.List<EffectDesc> DataList => _dataList;

    public EffectDesc Get(int id, int level) => _dataMapUnion.TryGetValue((id, level), out EffectDesc __v) ? __v : null;
    
    public void ResolveRef(Tables tables)
    {
        foreach(var _v in _dataList)
        {
            _v.ResolveRef(tables);
        }
    }
}

}
